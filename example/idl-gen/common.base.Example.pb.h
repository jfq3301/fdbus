// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.Example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eExample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eExample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eExample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ebase_2eExample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ebase_2eExample_2eproto;
namespace NFdbExample {
class ElapseTime;
class ElapseTimeDefaultTypeInternal;
extern ElapseTimeDefaultTypeInternal _ElapseTime_default_instance_;
class FdbMsgObjectInfo;
class FdbMsgObjectInfoDefaultTypeInternal;
extern FdbMsgObjectInfoDefaultTypeInternal _FdbMsgObjectInfo_default_instance_;
class FdbMsgObjectInfoTbl;
class FdbMsgObjectInfoTblDefaultTypeInternal;
extern FdbMsgObjectInfoTblDefaultTypeInternal _FdbMsgObjectInfoTbl_default_instance_;
class NowPlayingDetails;
class NowPlayingDetailsDefaultTypeInternal;
extern NowPlayingDetailsDefaultTypeInternal _NowPlayingDetails_default_instance_;
class SongId;
class SongIdDefaultTypeInternal;
extern SongIdDefaultTypeInternal _SongId_default_instance_;
}  // namespace NFdbExample
PROTOBUF_NAMESPACE_OPEN
template<> ::NFdbExample::ElapseTime* Arena::CreateMaybeMessage<::NFdbExample::ElapseTime>(Arena*);
template<> ::NFdbExample::FdbMsgObjectInfo* Arena::CreateMaybeMessage<::NFdbExample::FdbMsgObjectInfo>(Arena*);
template<> ::NFdbExample::FdbMsgObjectInfoTbl* Arena::CreateMaybeMessage<::NFdbExample::FdbMsgObjectInfoTbl>(Arena*);
template<> ::NFdbExample::NowPlayingDetails* Arena::CreateMaybeMessage<::NFdbExample::NowPlayingDetails>(Arena*);
template<> ::NFdbExample::SongId* Arena::CreateMaybeMessage<::NFdbExample::SongId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFdbExample {

enum FdbMediaSvcMsgId : int {
  REQ_METADATA = 0,
  REQ_RAWDATA = 1,
  REQ_CREATE_MEDIAPLAYER = 2,
  NTF_ELAPSE_TIME = 3,
  NTF_MEDIAPLAYER_CREATED = 4,
  NTF_MANUAL_UPDATE = 5
};
bool FdbMediaSvcMsgId_IsValid(int value);
constexpr FdbMediaSvcMsgId FdbMediaSvcMsgId_MIN = REQ_METADATA;
constexpr FdbMediaSvcMsgId FdbMediaSvcMsgId_MAX = NTF_MANUAL_UPDATE;
constexpr int FdbMediaSvcMsgId_ARRAYSIZE = FdbMediaSvcMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FdbMediaSvcMsgId_descriptor();
template<typename T>
inline const std::string& FdbMediaSvcMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbMediaSvcMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbMediaSvcMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FdbMediaSvcMsgId_descriptor(), enum_t_value);
}
inline bool FdbMediaSvcMsgId_Parse(
    const std::string& name, FdbMediaSvcMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FdbMediaSvcMsgId>(
    FdbMediaSvcMsgId_descriptor(), name, value);
}
// ===================================================================

class FdbMsgObjectInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFdbExample.FdbMsgObjectInfo) */ {
 public:
  FdbMsgObjectInfo();
  virtual ~FdbMsgObjectInfo();

  FdbMsgObjectInfo(const FdbMsgObjectInfo& from);
  FdbMsgObjectInfo(FdbMsgObjectInfo&& from) noexcept
    : FdbMsgObjectInfo() {
    *this = ::std::move(from);
  }

  inline FdbMsgObjectInfo& operator=(const FdbMsgObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgObjectInfo& operator=(FdbMsgObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FdbMsgObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgObjectInfo* internal_default_instance() {
    return reinterpret_cast<const FdbMsgObjectInfo*>(
               &_FdbMsgObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FdbMsgObjectInfo& a, FdbMsgObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgObjectInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgObjectInfo* New() const final {
    return CreateMaybeMessage<FdbMsgObjectInfo>(nullptr);
  }

  FdbMsgObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FdbMsgObjectInfo& from);
  void MergeFrom(const FdbMsgObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FdbMsgObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbExample.FdbMsgObjectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ebase_2eExample_2eproto);
    return ::descriptor_table_common_2ebase_2eExample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjNameFieldNumber = 2,
    kObjIdFieldNumber = 1,
  };
  // optional string obj_name = 2;
  bool has_obj_name() const;
  void clear_obj_name();
  const std::string& obj_name() const;
  void set_obj_name(const std::string& value);
  void set_obj_name(std::string&& value);
  void set_obj_name(const char* value);
  void set_obj_name(const char* value, size_t size);
  std::string* mutable_obj_name();
  std::string* release_obj_name();
  void set_allocated_obj_name(std::string* obj_name);

  // required uint32 obj_id = 1;
  bool has_obj_id() const;
  void clear_obj_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id() const;
  void set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:NFdbExample.FdbMsgObjectInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id_;
  friend struct ::TableStruct_common_2ebase_2eExample_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgObjectInfoTbl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFdbExample.FdbMsgObjectInfoTbl) */ {
 public:
  FdbMsgObjectInfoTbl();
  virtual ~FdbMsgObjectInfoTbl();

  FdbMsgObjectInfoTbl(const FdbMsgObjectInfoTbl& from);
  FdbMsgObjectInfoTbl(FdbMsgObjectInfoTbl&& from) noexcept
    : FdbMsgObjectInfoTbl() {
    *this = ::std::move(from);
  }

  inline FdbMsgObjectInfoTbl& operator=(const FdbMsgObjectInfoTbl& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgObjectInfoTbl& operator=(FdbMsgObjectInfoTbl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FdbMsgObjectInfoTbl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgObjectInfoTbl* internal_default_instance() {
    return reinterpret_cast<const FdbMsgObjectInfoTbl*>(
               &_FdbMsgObjectInfoTbl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FdbMsgObjectInfoTbl& a, FdbMsgObjectInfoTbl& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgObjectInfoTbl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgObjectInfoTbl* New() const final {
    return CreateMaybeMessage<FdbMsgObjectInfoTbl>(nullptr);
  }

  FdbMsgObjectInfoTbl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgObjectInfoTbl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FdbMsgObjectInfoTbl& from);
  void MergeFrom(const FdbMsgObjectInfoTbl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FdbMsgObjectInfoTbl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbExample.FdbMsgObjectInfoTbl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ebase_2eExample_2eproto);
    return ::descriptor_table_common_2ebase_2eExample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .NFdbExample.FdbMsgObjectInfo info = 1;
  int info_size() const;
  void clear_info();
  ::NFdbExample::FdbMsgObjectInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbExample::FdbMsgObjectInfo >*
      mutable_info();
  const ::NFdbExample::FdbMsgObjectInfo& info(int index) const;
  ::NFdbExample::FdbMsgObjectInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbExample::FdbMsgObjectInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:NFdbExample.FdbMsgObjectInfoTbl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbExample::FdbMsgObjectInfo > info_;
  friend struct ::TableStruct_common_2ebase_2eExample_2eproto;
};
// -------------------------------------------------------------------

class SongId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFdbExample.SongId) */ {
 public:
  SongId();
  virtual ~SongId();

  SongId(const SongId& from);
  SongId(SongId&& from) noexcept
    : SongId() {
    *this = ::std::move(from);
  }

  inline SongId& operator=(const SongId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongId& operator=(SongId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SongId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SongId* internal_default_instance() {
    return reinterpret_cast<const SongId*>(
               &_SongId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SongId& a, SongId& b) {
    a.Swap(&b);
  }
  inline void Swap(SongId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SongId* New() const final {
    return CreateMaybeMessage<SongId>(nullptr);
  }

  SongId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SongId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SongId& from);
  void MergeFrom(const SongId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbExample.SongId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ebase_2eExample_2eproto);
    return ::descriptor_table_common_2ebase_2eExample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NFdbExample.SongId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_common_2ebase_2eExample_2eproto;
};
// -------------------------------------------------------------------

class NowPlayingDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFdbExample.NowPlayingDetails) */ {
 public:
  NowPlayingDetails();
  virtual ~NowPlayingDetails();

  NowPlayingDetails(const NowPlayingDetails& from);
  NowPlayingDetails(NowPlayingDetails&& from) noexcept
    : NowPlayingDetails() {
    *this = ::std::move(from);
  }

  inline NowPlayingDetails& operator=(const NowPlayingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline NowPlayingDetails& operator=(NowPlayingDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NowPlayingDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NowPlayingDetails* internal_default_instance() {
    return reinterpret_cast<const NowPlayingDetails*>(
               &_NowPlayingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NowPlayingDetails& a, NowPlayingDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(NowPlayingDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NowPlayingDetails* New() const final {
    return CreateMaybeMessage<NowPlayingDetails>(nullptr);
  }

  NowPlayingDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NowPlayingDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NowPlayingDetails& from);
  void MergeFrom(const NowPlayingDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NowPlayingDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbExample.NowPlayingDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ebase_2eExample_2eproto);
    return ::descriptor_table_common_2ebase_2eExample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArtistFieldNumber = 1,
    kAlbumFieldNumber = 2,
    kGenreFieldNumber = 3,
    kTitleFieldNumber = 4,
    kFileNameFieldNumber = 5,
    kFolderNameFieldNumber = 6,
    kElapseTimeFieldNumber = 7,
  };
  // required string artist = 1;
  bool has_artist() const;
  void clear_artist();
  const std::string& artist() const;
  void set_artist(const std::string& value);
  void set_artist(std::string&& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  std::string* mutable_artist();
  std::string* release_artist();
  void set_allocated_artist(std::string* artist);

  // required string album = 2;
  bool has_album() const;
  void clear_album();
  const std::string& album() const;
  void set_album(const std::string& value);
  void set_album(std::string&& value);
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  std::string* mutable_album();
  std::string* release_album();
  void set_allocated_album(std::string* album);

  // required string genre = 3;
  bool has_genre() const;
  void clear_genre();
  const std::string& genre() const;
  void set_genre(const std::string& value);
  void set_genre(std::string&& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  std::string* mutable_genre();
  std::string* release_genre();
  void set_allocated_genre(std::string* genre);

  // required string title = 4;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string file_name = 5;
  bool has_file_name() const;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // optional string folder_name = 6;
  bool has_folder_name() const;
  void clear_folder_name();
  const std::string& folder_name() const;
  void set_folder_name(const std::string& value);
  void set_folder_name(std::string&& value);
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  std::string* mutable_folder_name();
  std::string* release_folder_name();
  void set_allocated_folder_name(std::string* folder_name);

  // required int32 elapse_time = 7;
  bool has_elapse_time() const;
  void clear_elapse_time();
  ::PROTOBUF_NAMESPACE_ID::int32 elapse_time() const;
  void set_elapse_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NFdbExample.NowPlayingDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr album_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 elapse_time_;
  friend struct ::TableStruct_common_2ebase_2eExample_2eproto;
};
// -------------------------------------------------------------------

class ElapseTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFdbExample.ElapseTime) */ {
 public:
  ElapseTime();
  virtual ~ElapseTime();

  ElapseTime(const ElapseTime& from);
  ElapseTime(ElapseTime&& from) noexcept
    : ElapseTime() {
    *this = ::std::move(from);
  }

  inline ElapseTime& operator=(const ElapseTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElapseTime& operator=(ElapseTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElapseTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElapseTime* internal_default_instance() {
    return reinterpret_cast<const ElapseTime*>(
               &_ElapseTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ElapseTime& a, ElapseTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ElapseTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElapseTime* New() const final {
    return CreateMaybeMessage<ElapseTime>(nullptr);
  }

  ElapseTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElapseTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElapseTime& from);
  void MergeFrom(const ElapseTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElapseTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbExample.ElapseTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ebase_2eExample_2eproto);
    return ::descriptor_table_common_2ebase_2eExample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourFieldNumber = 1,
    kMinuteFieldNumber = 2,
    kSecondFieldNumber = 3,
  };
  // required int32 hour = 1;
  bool has_hour() const;
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 minute = 2;
  bool has_minute() const;
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 second = 3;
  bool has_second() const;
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NFdbExample.ElapseTime)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  friend struct ::TableStruct_common_2ebase_2eExample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FdbMsgObjectInfo

// required uint32 obj_id = 1;
inline bool FdbMsgObjectInfo::has_obj_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FdbMsgObjectInfo::clear_obj_id() {
  obj_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMsgObjectInfo::obj_id() const {
  // @@protoc_insertion_point(field_get:NFdbExample.FdbMsgObjectInfo.obj_id)
  return obj_id_;
}
inline void FdbMsgObjectInfo::set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.FdbMsgObjectInfo.obj_id)
}

// optional string obj_name = 2;
inline bool FdbMsgObjectInfo::has_obj_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FdbMsgObjectInfo::clear_obj_name() {
  obj_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgObjectInfo::obj_name() const {
  // @@protoc_insertion_point(field_get:NFdbExample.FdbMsgObjectInfo.obj_name)
  return obj_name_.GetNoArena();
}
inline void FdbMsgObjectInfo::set_obj_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.FdbMsgObjectInfo.obj_name)
}
inline void FdbMsgObjectInfo::set_obj_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.FdbMsgObjectInfo.obj_name)
}
inline void FdbMsgObjectInfo::set_obj_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.FdbMsgObjectInfo.obj_name)
}
inline void FdbMsgObjectInfo::set_obj_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.FdbMsgObjectInfo.obj_name)
}
inline std::string* FdbMsgObjectInfo::mutable_obj_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.FdbMsgObjectInfo.obj_name)
  return obj_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgObjectInfo::release_obj_name() {
  // @@protoc_insertion_point(field_release:NFdbExample.FdbMsgObjectInfo.obj_name)
  if (!has_obj_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obj_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgObjectInfo::set_allocated_obj_name(std::string* obj_name) {
  if (obj_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.FdbMsgObjectInfo.obj_name)
}

// -------------------------------------------------------------------

// FdbMsgObjectInfoTbl

// repeated .NFdbExample.FdbMsgObjectInfo info = 1;
inline int FdbMsgObjectInfoTbl::info_size() const {
  return info_.size();
}
inline void FdbMsgObjectInfoTbl::clear_info() {
  info_.Clear();
}
inline ::NFdbExample::FdbMsgObjectInfo* FdbMsgObjectInfoTbl::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbExample.FdbMsgObjectInfoTbl.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbExample::FdbMsgObjectInfo >*
FdbMsgObjectInfoTbl::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:NFdbExample.FdbMsgObjectInfoTbl.info)
  return &info_;
}
inline const ::NFdbExample::FdbMsgObjectInfo& FdbMsgObjectInfoTbl::info(int index) const {
  // @@protoc_insertion_point(field_get:NFdbExample.FdbMsgObjectInfoTbl.info)
  return info_.Get(index);
}
inline ::NFdbExample::FdbMsgObjectInfo* FdbMsgObjectInfoTbl::add_info() {
  // @@protoc_insertion_point(field_add:NFdbExample.FdbMsgObjectInfoTbl.info)
  return info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbExample::FdbMsgObjectInfo >&
FdbMsgObjectInfoTbl::info() const {
  // @@protoc_insertion_point(field_list:NFdbExample.FdbMsgObjectInfoTbl.info)
  return info_;
}

// -------------------------------------------------------------------

// SongId

// required int32 id = 1;
inline bool SongId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SongId::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongId::id() const {
  // @@protoc_insertion_point(field_get:NFdbExample.SongId.id)
  return id_;
}
inline void SongId::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.SongId.id)
}

// -------------------------------------------------------------------

// NowPlayingDetails

// required string artist = 1;
inline bool NowPlayingDetails::has_artist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NowPlayingDetails::clear_artist() {
  artist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NowPlayingDetails::artist() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.artist)
  return artist_.GetNoArena();
}
inline void NowPlayingDetails::set_artist(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.artist)
}
inline void NowPlayingDetails::set_artist(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  artist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.artist)
}
inline void NowPlayingDetails::set_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.artist)
}
inline void NowPlayingDetails::set_artist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  artist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.artist)
}
inline std::string* NowPlayingDetails::mutable_artist() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.artist)
  return artist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_artist() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.artist)
  if (!has_artist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return artist_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_artist(std::string* artist) {
  if (artist != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  artist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.artist)
}

// required string album = 2;
inline bool NowPlayingDetails::has_album() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NowPlayingDetails::clear_album() {
  album_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NowPlayingDetails::album() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.album)
  return album_.GetNoArena();
}
inline void NowPlayingDetails::set_album(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.album)
}
inline void NowPlayingDetails::set_album(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  album_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.album)
}
inline void NowPlayingDetails::set_album(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.album)
}
inline void NowPlayingDetails::set_album(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  album_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.album)
}
inline std::string* NowPlayingDetails::mutable_album() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.album)
  return album_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_album() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.album)
  if (!has_album()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return album_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_album(std::string* album) {
  if (album != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  album_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.album)
}

// required string genre = 3;
inline bool NowPlayingDetails::has_genre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NowPlayingDetails::clear_genre() {
  genre_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NowPlayingDetails::genre() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.genre)
  return genre_.GetNoArena();
}
inline void NowPlayingDetails::set_genre(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  genre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.genre)
}
inline void NowPlayingDetails::set_genre(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  genre_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.genre)
}
inline void NowPlayingDetails::set_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  genre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.genre)
}
inline void NowPlayingDetails::set_genre(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  genre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.genre)
}
inline std::string* NowPlayingDetails::mutable_genre() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.genre)
  return genre_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_genre() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.genre)
  if (!has_genre()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return genre_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_genre(std::string* genre) {
  if (genre != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  genre_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.genre)
}

// required string title = 4;
inline bool NowPlayingDetails::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NowPlayingDetails::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NowPlayingDetails::title() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.title)
  return title_.GetNoArena();
}
inline void NowPlayingDetails::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.title)
}
inline void NowPlayingDetails::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.title)
}
inline void NowPlayingDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.title)
}
inline void NowPlayingDetails::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.title)
}
inline std::string* NowPlayingDetails::mutable_title() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_title() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.title)
}

// optional string file_name = 5;
inline bool NowPlayingDetails::has_file_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NowPlayingDetails::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NowPlayingDetails::file_name() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.file_name)
  return file_name_.GetNoArena();
}
inline void NowPlayingDetails::set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.file_name)
}
inline void NowPlayingDetails::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.file_name)
}
inline void NowPlayingDetails::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.file_name)
}
inline void NowPlayingDetails::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.file_name)
}
inline std::string* NowPlayingDetails::mutable_file_name() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_file_name() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.file_name)
  if (!has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.file_name)
}

// optional string folder_name = 6;
inline bool NowPlayingDetails::has_folder_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NowPlayingDetails::clear_folder_name() {
  folder_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NowPlayingDetails::folder_name() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.folder_name)
  return folder_name_.GetNoArena();
}
inline void NowPlayingDetails::set_folder_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.folder_name)
}
inline void NowPlayingDetails::set_folder_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  folder_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbExample.NowPlayingDetails.folder_name)
}
inline void NowPlayingDetails::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbExample.NowPlayingDetails.folder_name)
}
inline void NowPlayingDetails::set_folder_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbExample.NowPlayingDetails.folder_name)
}
inline std::string* NowPlayingDetails::mutable_folder_name() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:NFdbExample.NowPlayingDetails.folder_name)
  return folder_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NowPlayingDetails::release_folder_name() {
  // @@protoc_insertion_point(field_release:NFdbExample.NowPlayingDetails.folder_name)
  if (!has_folder_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return folder_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NowPlayingDetails::set_allocated_folder_name(std::string* folder_name) {
  if (folder_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  folder_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbExample.NowPlayingDetails.folder_name)
}

// required int32 elapse_time = 7;
inline bool NowPlayingDetails::has_elapse_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NowPlayingDetails::clear_elapse_time() {
  elapse_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NowPlayingDetails::elapse_time() const {
  // @@protoc_insertion_point(field_get:NFdbExample.NowPlayingDetails.elapse_time)
  return elapse_time_;
}
inline void NowPlayingDetails::set_elapse_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  elapse_time_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.NowPlayingDetails.elapse_time)
}

// -------------------------------------------------------------------

// ElapseTime

// required int32 hour = 1;
inline bool ElapseTime::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElapseTime::clear_hour() {
  hour_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ElapseTime::hour() const {
  // @@protoc_insertion_point(field_get:NFdbExample.ElapseTime.hour)
  return hour_;
}
inline void ElapseTime::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  hour_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.ElapseTime.hour)
}

// required int32 minute = 2;
inline bool ElapseTime::has_minute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElapseTime::clear_minute() {
  minute_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ElapseTime::minute() const {
  // @@protoc_insertion_point(field_get:NFdbExample.ElapseTime.minute)
  return minute_;
}
inline void ElapseTime::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  minute_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.ElapseTime.minute)
}

// required int32 second = 3;
inline bool ElapseTime::has_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElapseTime::clear_second() {
  second_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ElapseTime::second() const {
  // @@protoc_insertion_point(field_get:NFdbExample.ElapseTime.second)
  return second_;
}
inline void ElapseTime::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  second_ = value;
  // @@protoc_insertion_point(field_set:NFdbExample.ElapseTime.second)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFdbExample

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFdbExample::FdbMediaSvcMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFdbExample::FdbMediaSvcMsgId>() {
  return ::NFdbExample::FdbMediaSvcMsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eExample_2eproto
