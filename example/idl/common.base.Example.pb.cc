// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.Example.proto

#include "common.base.Example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eExample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto;
namespace NFdbExample {
class FdbMsgObjectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgObjectInfo> _instance;
} _FdbMsgObjectInfo_default_instance_;
class FdbMsgObjectInfoTblDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgObjectInfoTbl> _instance;
} _FdbMsgObjectInfoTbl_default_instance_;
class SongIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SongId> _instance;
} _SongId_default_instance_;
class NowPlayingDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NowPlayingDetails> _instance;
} _NowPlayingDetails_default_instance_;
class ElapseTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElapseTime> _instance;
} _ElapseTime_default_instance_;
}  // namespace NFdbExample
static void InitDefaultsscc_info_ElapseTime_common_2ebase_2eExample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbExample::_ElapseTime_default_instance_;
    new (ptr) ::NFdbExample::ElapseTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbExample::ElapseTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElapseTime_common_2ebase_2eExample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ElapseTime_common_2ebase_2eExample_2eproto}, {}};

static void InitDefaultsscc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbExample::_FdbMsgObjectInfo_default_instance_;
    new (ptr) ::NFdbExample::FdbMsgObjectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbExample::FdbMsgObjectInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto}, {}};

static void InitDefaultsscc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbExample::_FdbMsgObjectInfoTbl_default_instance_;
    new (ptr) ::NFdbExample::FdbMsgObjectInfoTbl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbExample::FdbMsgObjectInfoTbl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto}, {
      &scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto.base,}};

static void InitDefaultsscc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbExample::_NowPlayingDetails_default_instance_;
    new (ptr) ::NFdbExample::NowPlayingDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbExample::NowPlayingDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto}, {}};

static void InitDefaultsscc_info_SongId_common_2ebase_2eExample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbExample::_SongId_default_instance_;
    new (ptr) ::NFdbExample::SongId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbExample::SongId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SongId_common_2ebase_2eExample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SongId_common_2ebase_2eExample_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ebase_2eExample_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ebase_2eExample_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ebase_2eExample_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2ebase_2eExample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfo, obj_id_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfo, obj_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfoTbl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfoTbl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFdbExample::FdbMsgObjectInfoTbl, info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NFdbExample::SongId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::SongId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFdbExample::SongId, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, artist_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, album_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, genre_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, title_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, file_name_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, folder_name_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::NowPlayingDetails, elapse_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::NFdbExample::ElapseTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::ElapseTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFdbExample::ElapseTime, hour_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::ElapseTime, minute_),
  PROTOBUF_FIELD_OFFSET(::NFdbExample::ElapseTime, second_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::NFdbExample::FdbMsgObjectInfo)},
  { 9, 15, sizeof(::NFdbExample::FdbMsgObjectInfoTbl)},
  { 16, 22, sizeof(::NFdbExample::SongId)},
  { 23, 35, sizeof(::NFdbExample::NowPlayingDetails)},
  { 42, 50, sizeof(::NFdbExample::ElapseTime)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFdbExample::_FdbMsgObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFdbExample::_FdbMsgObjectInfoTbl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFdbExample::_SongId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFdbExample::_NowPlayingDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFdbExample::_ElapseTime_default_instance_),
};

const char descriptor_table_protodef_common_2ebase_2eExample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031common.base.Example.proto\022\013NFdbExample"
  "\"4\n\020FdbMsgObjectInfo\022\016\n\006obj_id\030\001 \002(\r\022\020\n\010"
  "obj_name\030\002 \001(\t\"B\n\023FdbMsgObjectInfoTbl\022+\n"
  "\004info\030\001 \003(\0132\035.NFdbExample.FdbMsgObjectIn"
  "fo\"\024\n\006SongId\022\n\n\002id\030\001 \002(\005\"\215\001\n\021NowPlayingD"
  "etails\022\016\n\006artist\030\001 \002(\t\022\r\n\005album\030\002 \002(\t\022\r\n"
  "\005genre\030\003 \002(\t\022\r\n\005title\030\004 \002(\t\022\021\n\tfile_name"
  "\030\005 \001(\t\022\023\n\013folder_name\030\006 \001(\t\022\023\n\013elapse_ti"
  "me\030\007 \002(\005\":\n\nElapseTime\022\014\n\004hour\030\001 \002(\005\022\016\n\006"
  "minute\030\002 \002(\005\022\016\n\006second\030\003 \002(\005*\232\001\n\020FdbMedi"
  "aSvcMsgId\022\020\n\014REQ_METADATA\020\000\022\017\n\013REQ_RAWDA"
  "TA\020\001\022\032\n\026REQ_CREATE_MEDIAPLAYER\020\002\022\023\n\017NTF_"
  "ELAPSE_TIME\020\003\022\033\n\027NTF_MEDIAPLAYER_CREATED"
  "\020\004\022\025\n\021NTF_MANUAL_UPDATE\020\005B\030\n\tipc.fdbusB\013"
  "NFdbExample"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ebase_2eExample_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2ebase_2eExample_2eproto_sccs[5] = {
  &scc_info_ElapseTime_common_2ebase_2eExample_2eproto.base,
  &scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto.base,
  &scc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto.base,
  &scc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto.base,
  &scc_info_SongId_common_2ebase_2eExample_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ebase_2eExample_2eproto_once;
static bool descriptor_table_common_2ebase_2eExample_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ebase_2eExample_2eproto = {
  &descriptor_table_common_2ebase_2eExample_2eproto_initialized, descriptor_table_protodef_common_2ebase_2eExample_2eproto, "common.base.Example.proto", 571,
  &descriptor_table_common_2ebase_2eExample_2eproto_once, descriptor_table_common_2ebase_2eExample_2eproto_sccs, descriptor_table_common_2ebase_2eExample_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_common_2ebase_2eExample_2eproto::offsets,
  file_level_metadata_common_2ebase_2eExample_2eproto, 5, file_level_enum_descriptors_common_2ebase_2eExample_2eproto, file_level_service_descriptors_common_2ebase_2eExample_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2ebase_2eExample_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2ebase_2eExample_2eproto), true);
namespace NFdbExample {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FdbMediaSvcMsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ebase_2eExample_2eproto);
  return file_level_enum_descriptors_common_2ebase_2eExample_2eproto[0];
}
bool FdbMediaSvcMsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FdbMsgObjectInfo::InitAsDefaultInstance() {
}
class FdbMsgObjectInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgObjectInfo>()._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obj_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FdbMsgObjectInfo::FdbMsgObjectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbExample.FdbMsgObjectInfo)
}
FdbMsgObjectInfo::FdbMsgObjectInfo(const FdbMsgObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_obj_name()) {
    obj_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_name_);
  }
  obj_id_ = from.obj_id_;
  // @@protoc_insertion_point(copy_constructor:NFdbExample.FdbMsgObjectInfo)
}

void FdbMsgObjectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto.base);
  obj_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_id_ = 0u;
}

FdbMsgObjectInfo::~FdbMsgObjectInfo() {
  // @@protoc_insertion_point(destructor:NFdbExample.FdbMsgObjectInfo)
  SharedDtor();
}

void FdbMsgObjectInfo::SharedDtor() {
  obj_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdbMsgObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgObjectInfo& FdbMsgObjectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgObjectInfo_common_2ebase_2eExample_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbExample.FdbMsgObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obj_name_.ClearNonDefaultToEmptyNoArena();
  }
  obj_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FdbMsgObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obj_id(&has_bits);
          obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string obj_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_obj_name(), ptr, ctx, "NFdbExample.FdbMsgObjectInfo.obj_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FdbMsgObjectInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFdbExample.FdbMsgObjectInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 obj_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_obj_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string obj_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj_name().data(), static_cast<int>(this->obj_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.FdbMsgObjectInfo.obj_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFdbExample.FdbMsgObjectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFdbExample.FdbMsgObjectInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgObjectInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbExample.FdbMsgObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 obj_id = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // optional string obj_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_name().data(), static_cast<int>(this->obj_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.FdbMsgObjectInfo.obj_name");
    target = stream->WriteStringMaybeAliased(
        2, this->obj_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbExample.FdbMsgObjectInfo)
  return target;
}

size_t FdbMsgObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbExample.FdbMsgObjectInfo)
  size_t total_size = 0;

  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->obj_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string obj_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->obj_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgObjectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFdbExample.FdbMsgObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FdbMsgObjectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FdbMsgObjectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFdbExample.FdbMsgObjectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFdbExample.FdbMsgObjectInfo)
    MergeFrom(*source);
  }
}

void FdbMsgObjectInfo::MergeFrom(const FdbMsgObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbExample.FdbMsgObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      obj_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      obj_id_ = from.obj_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FdbMsgObjectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFdbExample.FdbMsgObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FdbMsgObjectInfo::CopyFrom(const FdbMsgObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbExample.FdbMsgObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgObjectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void FdbMsgObjectInfo::InternalSwap(FdbMsgObjectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obj_name_.Swap(&other->obj_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obj_id_, other->obj_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FdbMsgObjectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FdbMsgObjectInfoTbl::InitAsDefaultInstance() {
}
class FdbMsgObjectInfoTbl::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgObjectInfoTbl>()._has_bits_);
};

FdbMsgObjectInfoTbl::FdbMsgObjectInfoTbl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbExample.FdbMsgObjectInfoTbl)
}
FdbMsgObjectInfoTbl::FdbMsgObjectInfoTbl(const FdbMsgObjectInfoTbl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFdbExample.FdbMsgObjectInfoTbl)
}

void FdbMsgObjectInfoTbl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto.base);
}

FdbMsgObjectInfoTbl::~FdbMsgObjectInfoTbl() {
  // @@protoc_insertion_point(destructor:NFdbExample.FdbMsgObjectInfoTbl)
  SharedDtor();
}

void FdbMsgObjectInfoTbl::SharedDtor() {
}

void FdbMsgObjectInfoTbl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgObjectInfoTbl& FdbMsgObjectInfoTbl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgObjectInfoTbl_common_2ebase_2eExample_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgObjectInfoTbl::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbExample.FdbMsgObjectInfoTbl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FdbMsgObjectInfoTbl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFdbExample.FdbMsgObjectInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FdbMsgObjectInfoTbl::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFdbExample.FdbMsgObjectInfoTbl)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFdbExample.FdbMsgObjectInfo info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFdbExample.FdbMsgObjectInfoTbl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFdbExample.FdbMsgObjectInfoTbl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgObjectInfoTbl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbExample.FdbMsgObjectInfoTbl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFdbExample.FdbMsgObjectInfo info = 1;
  for (auto it = this->info().pointer_begin(),
            end = this->info().pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbExample.FdbMsgObjectInfoTbl)
  return target;
}

size_t FdbMsgObjectInfoTbl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbExample.FdbMsgObjectInfoTbl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFdbExample.FdbMsgObjectInfo info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgObjectInfoTbl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFdbExample.FdbMsgObjectInfoTbl)
  GOOGLE_DCHECK_NE(&from, this);
  const FdbMsgObjectInfoTbl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FdbMsgObjectInfoTbl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFdbExample.FdbMsgObjectInfoTbl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFdbExample.FdbMsgObjectInfoTbl)
    MergeFrom(*source);
  }
}

void FdbMsgObjectInfoTbl::MergeFrom(const FdbMsgObjectInfoTbl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbExample.FdbMsgObjectInfoTbl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void FdbMsgObjectInfoTbl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFdbExample.FdbMsgObjectInfoTbl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FdbMsgObjectInfoTbl::CopyFrom(const FdbMsgObjectInfoTbl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbExample.FdbMsgObjectInfoTbl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgObjectInfoTbl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void FdbMsgObjectInfoTbl::InternalSwap(FdbMsgObjectInfoTbl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FdbMsgObjectInfoTbl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SongId::InitAsDefaultInstance() {
}
class SongId::_Internal {
 public:
  using HasBits = decltype(std::declval<SongId>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SongId::SongId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbExample.SongId)
}
SongId::SongId(const SongId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NFdbExample.SongId)
}

void SongId::SharedCtor() {
  id_ = 0;
}

SongId::~SongId() {
  // @@protoc_insertion_point(destructor:NFdbExample.SongId)
  SharedDtor();
}

void SongId::SharedDtor() {
}

void SongId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SongId& SongId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SongId_common_2ebase_2eExample_2eproto.base);
  return *internal_default_instance();
}


void SongId::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbExample.SongId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SongId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SongId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFdbExample.SongId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFdbExample.SongId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFdbExample.SongId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SongId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbExample.SongId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbExample.SongId)
  return target;
}

size_t SongId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbExample.SongId)
  size_t total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFdbExample.SongId)
  GOOGLE_DCHECK_NE(&from, this);
  const SongId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SongId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFdbExample.SongId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFdbExample.SongId)
    MergeFrom(*source);
  }
}

void SongId::MergeFrom(const SongId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbExample.SongId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void SongId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFdbExample.SongId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongId::CopyFrom(const SongId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbExample.SongId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SongId::InternalSwap(SongId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SongId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NowPlayingDetails::InitAsDefaultInstance() {
}
class NowPlayingDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<NowPlayingDetails>()._has_bits_);
  static void set_has_artist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_album(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_genre(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_folder_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_elapse_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

NowPlayingDetails::NowPlayingDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbExample.NowPlayingDetails)
}
NowPlayingDetails::NowPlayingDetails(const NowPlayingDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_genre()) {
    genre_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  folder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_folder_name()) {
    folder_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
  }
  elapse_time_ = from.elapse_time_;
  // @@protoc_insertion_point(copy_constructor:NFdbExample.NowPlayingDetails)
}

void NowPlayingDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto.base);
  artist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  folder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  elapse_time_ = 0;
}

NowPlayingDetails::~NowPlayingDetails() {
  // @@protoc_insertion_point(destructor:NFdbExample.NowPlayingDetails)
  SharedDtor();
}

void NowPlayingDetails::SharedDtor() {
  artist_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  folder_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NowPlayingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NowPlayingDetails& NowPlayingDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NowPlayingDetails_common_2ebase_2eExample_2eproto.base);
  return *internal_default_instance();
}


void NowPlayingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbExample.NowPlayingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      artist_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      album_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      genre_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      folder_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  elapse_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NowPlayingDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string artist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_artist(), ptr, ctx, "NFdbExample.NowPlayingDetails.artist");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string album = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_album(), ptr, ctx, "NFdbExample.NowPlayingDetails.album");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string genre = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_genre(), ptr, ctx, "NFdbExample.NowPlayingDetails.genre");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_title(), ptr, ctx, "NFdbExample.NowPlayingDetails.title");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_file_name(), ptr, ctx, "NFdbExample.NowPlayingDetails.file_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string folder_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_folder_name(), ptr, ctx, "NFdbExample.NowPlayingDetails.folder_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 elapse_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_elapse_time(&has_bits);
          elapse_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NowPlayingDetails::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFdbExample.NowPlayingDetails)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string artist = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string album = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string genre = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre().data(), static_cast<int>(this->genre().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.genre");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string folder_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->folder_name().data(), static_cast<int>(this->folder_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "NFdbExample.NowPlayingDetails.folder_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 elapse_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_elapse_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapse_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFdbExample.NowPlayingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFdbExample.NowPlayingDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* NowPlayingDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbExample.NowPlayingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string artist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.artist");
    target = stream->WriteStringMaybeAliased(
        1, this->artist(), target);
  }

  // required string album = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.album");
    target = stream->WriteStringMaybeAliased(
        2, this->album(), target);
  }

  // required string genre = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.genre");
    target = stream->WriteStringMaybeAliased(
        3, this->genre(), target);
  }

  // required string title = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.title");
    target = stream->WriteStringMaybeAliased(
        4, this->title(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.file_name");
    target = stream->WriteStringMaybeAliased(
        5, this->file_name(), target);
  }

  // optional string folder_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->folder_name().data(), static_cast<int>(this->folder_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NFdbExample.NowPlayingDetails.folder_name");
    target = stream->WriteStringMaybeAliased(
        6, this->folder_name(), target);
  }

  // required int32 elapse_time = 7;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->elapse_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbExample.NowPlayingDetails)
  return target;
}

size_t NowPlayingDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFdbExample.NowPlayingDetails)
  size_t total_size = 0;

  if (has_artist()) {
    // required string artist = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->artist());
  }

  if (has_album()) {
    // required string album = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->album());
  }

  if (has_genre()) {
    // required string genre = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->genre());
  }

  if (has_title()) {
    // required string title = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_elapse_time()) {
    // required int32 elapse_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->elapse_time());
  }

  return total_size;
}
size_t NowPlayingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbExample.NowPlayingDetails)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000004f) ^ 0x0000004f) == 0) {  // All required fields are present.
    // required string artist = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->artist());

    // required string album = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->album());

    // required string genre = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->genre());

    // required string title = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->title());

    // required int32 elapse_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->elapse_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000030u) {
    // optional string file_name = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string folder_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->folder_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowPlayingDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFdbExample.NowPlayingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const NowPlayingDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NowPlayingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFdbExample.NowPlayingDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFdbExample.NowPlayingDetails)
    MergeFrom(*source);
  }
}

void NowPlayingDetails::MergeFrom(const NowPlayingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbExample.NowPlayingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      artist_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      album_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      genre_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.genre_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      folder_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.folder_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      elapse_time_ = from.elapse_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NowPlayingDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFdbExample.NowPlayingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowPlayingDetails::CopyFrom(const NowPlayingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbExample.NowPlayingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowPlayingDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;
  return true;
}

void NowPlayingDetails::InternalSwap(NowPlayingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  artist_.Swap(&other->artist_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  album_.Swap(&other->album_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  genre_.Swap(&other->genre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  folder_name_.Swap(&other->folder_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elapse_time_, other->elapse_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NowPlayingDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElapseTime::InitAsDefaultInstance() {
}
class ElapseTime::_Internal {
 public:
  using HasBits = decltype(std::declval<ElapseTime>()._has_bits_);
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ElapseTime::ElapseTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbExample.ElapseTime)
}
ElapseTime::ElapseTime(const ElapseTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hour_, &from.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:NFdbExample.ElapseTime)
}

void ElapseTime::SharedCtor() {
  ::memset(&hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(second_));
}

ElapseTime::~ElapseTime() {
  // @@protoc_insertion_point(destructor:NFdbExample.ElapseTime)
  SharedDtor();
}

void ElapseTime::SharedDtor() {
}

void ElapseTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElapseTime& ElapseTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElapseTime_common_2ebase_2eExample_2eproto.base);
  return *internal_default_instance();
}


void ElapseTime::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbExample.ElapseTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_) -
        reinterpret_cast<char*>(&hour_)) + sizeof(second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ElapseTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ElapseTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFdbExample.ElapseTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hour = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_hour(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 minute = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_minute(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 second = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFdbExample.ElapseTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFdbExample.ElapseTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ElapseTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbExample.ElapseTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hour = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->hour(), target);
  }

  // required int32 minute = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->minute(), target);
  }

  // required int32 second = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbExample.ElapseTime)
  return target;
}

size_t ElapseTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFdbExample.ElapseTime)
  size_t total_size = 0;

  if (has_hour()) {
    // required int32 hour = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  if (has_minute()) {
    // required int32 minute = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->minute());
  }

  if (has_second()) {
    // required int32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->second());
  }

  return total_size;
}
size_t ElapseTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbExample.ElapseTime)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 hour = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hour());

    // required int32 minute = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->minute());

    // required int32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElapseTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFdbExample.ElapseTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ElapseTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElapseTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFdbExample.ElapseTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFdbExample.ElapseTime)
    MergeFrom(*source);
  }
}

void ElapseTime::MergeFrom(const ElapseTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbExample.ElapseTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000002u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_ = from.second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElapseTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFdbExample.ElapseTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElapseTime::CopyFrom(const ElapseTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbExample.ElapseTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElapseTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ElapseTime::InternalSwap(ElapseTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_, other->second_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElapseTime::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFdbExample
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFdbExample::FdbMsgObjectInfo* Arena::CreateMaybeMessage< ::NFdbExample::FdbMsgObjectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbExample::FdbMsgObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbExample::FdbMsgObjectInfoTbl* Arena::CreateMaybeMessage< ::NFdbExample::FdbMsgObjectInfoTbl >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbExample::FdbMsgObjectInfoTbl >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbExample::SongId* Arena::CreateMaybeMessage< ::NFdbExample::SongId >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbExample::SongId >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbExample::NowPlayingDetails* Arena::CreateMaybeMessage< ::NFdbExample::NowPlayingDetails >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbExample::NowPlayingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbExample::ElapseTime* Arena::CreateMaybeMessage< ::NFdbExample::ElapseTime >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbExample::ElapseTime >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
